{% layout "server/layouts/base.liquid" %}

{% block content %}
<style>
    .garden {
  position: relative;
  width: 200px;
  height: 200px;
  border: 5px solid #ccc;
  border-radius: 10px;
}

.ball {
  position: absolute;
  top: 90px;
  left: 90px;
  width: 20px;
  height: 20px;
  background: green;
  border-radius: 100%;
}

  </style>
<script>
//   document.addEventListener("DOMContentLoaded", () => {
//     function runAnimation(){
//       const cards = document.getElementsByClassName("card");
//       console.log("Cards found:", cards.length);
 
//       let id = 1;
//       for (let card of cards){
//       card.animate(
//         [
//           { transform: "translateY(-5px)" },
//         { transform: "translateY(5px)" },
//         ],
//         {
//           duration: 1000,
//           delay: 200 * id,
//           iterations: Infinity,
//           direction: "alternate",
//           easing: "ease-in-out",
//         }
//       );
//       id += 1;
//     }
// }
//     runAnimation();
//   });

window.addEventListener("deviceorientation", handleOrientation, true);
 
const ball = document.querySelector(".ball");
const garden = document.querySelector(".garden");
const output = document.querySelector(".output");

const maxX = garden.clientWidth - ball.clientWidth;
const maxY = garden.clientHeight - ball.clientHeight;

function handleOrientation(event) {
  let x = event.beta; // In degree in the range [-180,180)
  let y = event.gamma; // In degree in the range [-90,90)

  //output.textContent = `beta: ${x}\n`;
 // output.textContent += `gamma: ${y}\n`;

  // Because we don't want to have the device upside down
  // We constrain the x value to the range [-90,90]
  if (x > 90) {
    x = 90;
  }
  if (x < -90) {
    x = -90;
  }

  // To make computation easier we shift the range of
  // x and y to [0,180]
  x += 90;
  y += 90;

  // 10 is half the size of the ball
  // It centers the positioning point to the center of the ball
  ball.style.left = `${(maxY * y) / 180 - 10}px`; // rotating device around the y axis moves the ball horizontally
  ball.style.top = `${(maxX * x) / 180 - 10}px`; // rotating device around the x axis moves the ball vertically
}

window.addEventListener("deviceorientation", handleOrientation);



</script>
<h1 class="h1">{{ title }}</h1>
<div class="garden">
  <div class="ball"></div>
</div>
Hold the device parallel to the ground. Rotate along its x and y axes to see the
ball move up/down and left/right respectively.
<pre class="output"></pre>

{% comment %} 
     <table class="card">
      <tr> <th>{{ hero1.name }}</th></tr>
      <tr>
        <th>
          <a href="/Hero/{{hero1.id}}">
          <img src={{ hero1.image.url }} alt={{ hero1.name }} onerror="this.src =
          'https://picsum.photos/id/237/480/640'" />
          </a>
        </th>
      </tr>
      <tr>
        <th>Intelligence</th>
        <th>{{ hero1.powerstats.intelligence }}</th>
      </tr>
      <tr>
        <th>strength</th>
        <th>{{ hero1.powerstats.strength }}</th>
      </tr>
      <tr>
        <th>speed</th>
        <th>{{ hero1.powerstats.speed }}</th>
      </tr>
      <tr>
        <th>durability</th>
        <th>{{ hero1.powerstats.durability }}</th>
      </tr>
      <tr>
        <th>power</th>
        <th>{{ hero1.powerstats.power }}</th>
      </tr>
      <tr>
      <th>combat</th>
      <th>{{ hero1.powerstats.combat }}</th>
      </tr>
    </table> 


    <table class="card">
      <tr> <th>{{ hero2.name }}</th></tr>
      <tr>
        <th>
          <a href="/Hero/{{hero2.id}}">
          <img src={{ hero2.image.url }} alt={{ hero2.name }} onerror="this.src =
          'https://picsum.photos/id/237/480/640'"/>
          </a>
        </th>
      </tr>
      <tr>
        <th>Intelligence</th>
        <th>{{ hero2.powerstats.intelligence }}</th>
      </tr>
      <tr>
        <th>strength</th>
        <th>{{ hero2.powerstats.strength }}</th>
      </tr>
      <tr>
        <th>speed</th>
        <th>{{ hero2.powerstats.speed }}</th>
      </tr>
      <tr>
        <th>durability</th>
        <th>{{ hero2.powerstats.durability }}</th>
      </tr>
      <tr>
        <th>power</th>
        <th>{{ hero2.powerstats.power }}</th>
      </tr>
      <th>combat</th>
      <th>{{ hero2.powerstats.combat }}</th>
    </table> 
 {% endcomment %}


</ul>

{% endblock %}
